name: Test Windows ETN

on: 
  push:
    branches: 
      - main
  workflow_dispatch:

jobs:
  test:
    runs-on: windows-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Setup Node.js
      uses: actions/setup-node@v2
      with:
        node-version: 'lts/*'

    - name: Download era_test_node binary from GitHub Releases
      run: |
        Invoke-WebRequest -Uri "https://github.com/idea404/etn-windows/releases/download/v0.0.1/era_test_node.exe" -OutFile "era_test_node.exe"
      shell: powershell

    - name: Check executable permissions
      run: |
        (Get-Acl .\era_test_node.exe).AccessToString
      shell: pwsh
    
    - name: Run era_test_node binary in CMD
      run: .\era_test_node.exe --show-calls run
      shell: cmd

    - name: Check if era_test_node is running
      run: |
        Get-Process | Where-Object { $_.ProcessName -like "era_test_node" }
      shell: pwsh

    - name: Wait for era_test_node to be ready
      run: |
        $attempt = 0
        do {
          $attempt++
          Write-Output "Attempt $attempt to connect to era_test_node..."
          Start-Sleep -Seconds 2
          $response = Invoke-WebRequest -Uri "http://127.0.0.1:8011" -Method POST -Body '{"jsonrpc":"2.0","method":"net_version","id":1}' -ContentType 'application/json' -ErrorAction SilentlyContinue
        } while (($null -eq $response -or $response.StatusCode -ne 200) -and $attempt -le 30)
        if ($null -eq $response -or $response.StatusCode -ne 200) {
          throw "Failed to connect to era_test_node after 30 attempts."
        }
      shell: pwsh

    - name: Install dependencies for custom-aa
      run: |
        cd custom-aa
        yarn

    - name: Custom AA tests
      run: |
        cd custom-aa
        yarn test

    - name: Test Endpoints
      run: |
        $requests = Get-Content -Path .\test_endpoints.http -Raw -ErrorAction Stop | Out-String | Split-String -Delimiter "###"
        foreach ($request in $requests) {
            $response = curl -s -X POST -H "Content-Type: application/json" -d $request http://127.0.0.1:8011
            if ($response -eq $null) {
                throw "Request failed: $request"
            }
        }
      shell: powershell
